When writing technical paper you should use the Latex typesetting
system.  In this directory is an example of a paper typeset using
Latex, my 2007 ISIT paper on mixed-integer LP decoding.

To compile the document type (e.g., at the command line on a Unix or
Macintosh system) there are two methods, the first is the newer, the
second is the older method.  (Note that there are many graphical
interfaces for Latex which I do not use and have other methods.)

----------------------------
First method: using "pdflatex"

(i) Initial compile (will not have the equation and second numbers correct)

> pdflatex main

(ii) Compile again to get cross-references section and equation number
right.

> pdflatex main

(iii) Get itations cross-referenced

> bibtex main

(iv) Compile again (2x)to get citation reference correct

> pdflatex main

> pdflatex main

-----------------------------

Second (older) method: goes through a .dvi and .pdf format first.

(i) Initial compile (produces a .dvi "device independent file which
you can view using an appropriate viewer)

> latex main

(ii) Compile again to get cross-references section and equation number
right.

> latex main 

(iii) Get citations cross-referenced.  

> bibtex main 

(iv) Compile again (2x) to get citation references correct.

> latex main

> latex main

(v) Turns the .dvi file into a postscript file.  Try both of the
following commands:

> dvips -o main.ps main.dvi 

and

> dvips -o main.ps -t letter main.dvi 

Depending on how things are installed on your machine you may or may
not need the option "-t letter".  The difference between the two is
often a vertical shift -- one version may be better centered than the
other. 

(vi) Convert postscript into .pdf file viewable by all

> ps2pdf main.ps

----------------------------

==> Note, these are the commands to use at the command line on a Unix
or Mac system.  There are may packages that will probably do the above
steps for you.  I have never used Latex on a Windows system but
obviously the commands will be different there.
  

(A) RECOMMENDED BOOKS

The prime method I used to learn Latex was to mimic things that worked
(e.g., in the attached ISIT paper) until my domain of expertise slowly
expanded.  I used two books that I think are quite good.  The first is
"Latex" by Leslie Lamport.  Quite old now, but I think a great
introduction to the basic workings.  The second is "The Latex
Companion" by Goossens et al.  There are likely great other options
out there now, so ask your peers for recommendations.

In the following I outline the "best practices" I have developed for
writing Latex documents.  By learning them now you will save yourself
a lot of time later:

-- subdivide your document
-- use sub-directories
-- use macros for *everything*
-- use version control


(B) SUBDIVIDE YOUR DOCUMENT INTO SMALL CHUNKS

As with software break your paper into individual chunks.  Typically I
define a "main.tex" file that is the master document.  Each section is
another .tex file, in this case: introduction.tex, background.tex,
mixedInteger.tex, numerical.tex, and conclusions.tex.  All are called
as inputs from main.  This makes it easier to find a section to work
on, and facilitates the parallel workings of many co-authors


(C) USE SUB-DIRECTORIES

In your main file have separate sub-directories for "figures",
"matlab", and "styles".  This will keep your central directory sparse.

-- The figure directory has obvious contents.  I most often use xfig
   to generate my picture files (e.g., block diagrams).

-- In the matlab sub-directory I keep .m files and associated data
   files need to regenerated every figure in the paper.  This is
   really key.  Between the time you submit a paper and the ensuing
   post-review revisions there will be months, sometimes years,
   figuring out how to regenerate a plot from Matlab, e.g., if you
   want to change labels can be a real headache.  If you can just go
   into your directory and run a bunch of scripts, one of which will
   regenerate the figure in questions, will allow you to make small
   adjustments (like title and axis labels), as well as bigger ones to
   the parameters of the plot.

-- In the styles directory I keep, e.g., here the IEEE-defined style
   file for conference papers, but would have a thesis styles files if
   needed.  I also put in files of standard macros I use (here
   defs.tex, gww_chars.tex, gww_defs.tex, these particular files
   originated from my thesis adviser Greg Wornell).  More on macros
   next.


(D) USE MACROS FOR **EVERYTHING**

It will *always* be the case that once you've been writing for a
while, sometime not till after the reviews come back, the notation you
use for you paper will change.  If the typesetting is hard-wired,
changing notation can suck up hours of time (to make the changes, make
sure you don't change other things by mistake, and verifying you've
actually made all the changes you need to).  Macros avoid this
problem.

Macros are defined before the "\begin{document}" line in (in my case)
the main.tex file.

For instance in this document macros are defined by the following
lines (in main.tex):

\input{styles/gww_defs}
\input{styles/gww_chars}
\input{styles/defs}

\newcommand{\bl}{n}
\newcommand{\code}{\mathcal{C}}
\newcommand{\neighborhood}{\mathcal{N}}
\newcommand{\oddSet}{\mathcal{V}}
\newcommand{\numChks}{m}
\newcommand{\worstInd}{{i^{\ast}}}

The first three files input standard definitions I (often) use from
Greg, e.g., \rvx defined a random variable, \svx a sample of \rvx,
\rvbx a bold (i.e., vector) random variable, \svbx a sample vector,
etc.

The other six are specific to this paper, e.g., \bl for block-length.
You might ask "why not just use $n$ in the paper, everyone always uses
$n$ for a code's block-length.  Well, sometimes you want to use $n$,
other times you may want to use $N$, in particular here $N$ would be
used to define the neighborhood of a check or variable node, you just
don't know from the outset.

Macros can also take arguments, e.g., the macro (defined in another paper)

\newcommand{\chan}[3]{W_{#1}(#2|#3)}

would be called as $\chan{\svs^\bl}{\svy^{\bl}|\svx^{\bl}}$ and would
render $W_{s^n}(y^n|x^n)$, i.e., the probability of observing the
length-n output y^n when the input to this (state-dependent, the state
is s^n) channel is $x^n.

In brief, *everything* should be a macro, even block-length


(E) USE VERSION CONTROL

Over the past 12-18 months I have started to use version control on
every paper.  Using version control makes it much easier to share
updates to a paper within a work group.  I use the Mercurial
distributed source control system.  I like this far better than CVS.
In contrast to CVS everyone has their own repository, hence
'distributed' version control.

I was not using Mercurial when writing this paper (I would now), but
when I put together this sample directory I added a repository.  As I
update this file I will continue to update the repository.

If you look at the directory and type "ls -a" you should see a
.hgignore file and a .hg sub-directory.  The former tells Mercurial
what types of files not to track.  Reading .hgignore you see the
following list:

*.bbl
*.blg
*.beam
*.pyc
*.bak
*~
#*
main.ps
.DS_STORE
.DS_Store
*.pdf
*.aux
*.dvi
*.log
*.ps

No files with these ending will be backed up.  Important files like
the .tex files or .m files are backed up.

The .hg directory is repository.

I have added a separate 'README_hgBasics' file with the basics of this
version control system in this repository.