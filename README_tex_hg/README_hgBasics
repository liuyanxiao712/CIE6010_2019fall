For a complete tutorial on the basics of Mercurial, I highly recommend
chapter 2 (and maybe chapter 3) of the book available at

http://hgbook.red-bean.com/

++++++++++++++++++++++++++++++++++++++++
BACKGROUND:

For the past few years I have started to use version control on almost
all of my projects.  Using version control makes it much easier to
share updates to a paper within a work group.  I use the Mercurial
distributed source control system.  I like this far better than CVS.
In contrast to CVS everyone has their own repository, hence
'distributed' version control.

I was not using Mercurial when writing this paper (I would now), but
when I put together this sample directory I added a repository.  As I
update this file I will continue to update the repository.

If you look at the directory and type "ls -a" you should see a
.hgignore file and a .hg sub-directory.  The former tells Mercurial
what types of files not to track.  Reading .hgignore you see the
following list:

*.bbl
*.blg
*.beam
*.pyc
*.bak
*~
#*
main.ps
.DS_STORE
.DS_Store
*.pdf
*.aux
*.dvi
*.log
*.ps

No files with these ending will be backed up.  Important files like
the .tex files or .m files are backed up.

The .hg directory is repository.

++++

A) INSTALLATION

Install mercurial from www.selenic.com/mercurial/

works on windows, linux, mac.  Getting started manuals are here as
well.


B) CREATING A REPOSITORY 

Go into directory in question and type "hg init"


C) INITIAL ADDITION OF FILES TO DIRECTORY

type "hg add", the files are ready to be added, but not yet in the directory

type "hg status", will show you all the files added, but not yet committed

then to commit type "hg commit -m "(your message summarizing what you
are committing, e.g., in this case perhaps 'initial commit' would be
good)"

type "hg status" again and you won't see the files that you committed
at the last step

Note that the file .hgignore tells the system what types of files
never to add to the directory.


D) TRACKING VERSIONS

Type "hg log" to see all the versions and comments entered at commits.
The 'changeset' you see is a hash of the corresponding version of the
repository.  Helps when reconciling different user's versions.

Type "hg log -r tip" just to see the most recent change-set.


E) NEXT WORK ON YOUR DOCUMENT

To add new specific file type "hg add (filename)" and then to commit
"hg commit -m "(your message as before)""


F) CREATING A BUNDLE

A 'bundle' is an update.  E.g., I have an earlier version of the paper
and you want to send me the updates.  You don't need to send me
everything, just the innovations.  Those innovations are the bundle.

To create a bundle do the following.  First, you bring your repository
up-to-date.

(1) type "hg status"

This will display any modified or newly added files, or new files that
haven't yet been added to the repository.  If you see a "?" in the
left-hand column, that file has not be added yet and will not be
included in any bundle.  If you want to add that file (e.g., it
corresponds to a new figure file you just generated), type "hg add
(filename)". You don't need to add new sub-directories, and you don't
need to be in the directory of the file you want to add.  I usually
add from the top directory of the repository.  You can add multiple
files using * and you call add all ? files by simply typing "hg add".

(1b) type "hg add (filename)" for the files needed, per paragraph above.

(2) type "hg commit -m "(your message summarizing updates)"

Now your repository is up-to-date and ready to generate a bundle.

(3) To generate a bundle you have to define which 'base' version you
are creating the bundle from.  If, e.g., someone has missed a couple
updates (say you've updated your repository a number of times before
distributing the bundle) you may not choose the very last version.
Use "hg log" or "hg log -r tip" to find the versions you can build
from.  The bundle command is

"hg bundle --base (version number you want to create difference from)
(filename)"

For example, if you're on version 35 and you think I certainly have
version 28, you could type

"hg bundle --base 28 ourPaper_v28_v35.bundle"

+++++++++++++++++++++++++

When I receive the bundle and I want to unbundle:

(1) "hg unbundle (filename)", e.g., for the last bundle would be "hg
unbundle ourPaper_v28_v35" from within my ourPaper directory

(2) "hg update", as long as no merge conflicts exists, this should
bring things back to synch.


G) GETTING HELP

Always useful "hg help", there are manuals at www.selenic.com/mecurial


H) CLONING    

It is very easy to make a copy of your repository to share with
someone, use the "hg clone" command, use "hg help" to find out more.
This clone doesn't include the files ignored via .hgignore.

I used the clone command to create the directory I sent to you that
includes this file.  Notice there are no .bbl/.blg/.dvi/.log etc file
even though there are in my working directory.  Before I sent it to
you I cloned the directory to get a "clean" working copy and
recompiled my latex file.  It worked, which told me all the necessary
files to create the paper are in the repository.


(I) A CRASH COURSE ON MECURIAL

Below I have included a colleagues' (Dr. Shantanu Rane of the
Mitsubishi Electric Research Laboratories) crash course on Mecurial he
emailed to a pair of collaborators we were working with on a paper
subject to a tight time constraint (so we needed to have multiple
authors working at the same time).  This covers the same material as
above, but in another's words.

+++++++++++++++++++++++++++++++

** Creating an Archive (This section is FYI only. You don't need to do
this for the current paper. I've done this already.)

1. In the folder containing the paper files, type the command: "hg
init" This will create some files for mercurial data management within
that directory.

2. If you type "hg status" you will see all the paper files along with
"?" next to them. Mercurial doesn't know what to do with these files
yet.

3. To include files into the archive type "hg add filename". For
example: "hg add *.tex". This will add all tex files to the
archive. You can verify this by running "hg status" again. This will
show a 'A' next to the tex files and a "?" next to everything else. In
this way, you can add different kinds of files.

4. There are always files that you don't want to add to the archive,
and you want mercurial to ignore these. For example, *.bbl, *.aux and
other files that latex generates. To signal this, you edit a file
called ".hgignore" and specify the file extensions. Again, you don't
need to do this. Just see the .hgignore file that I have included.


** Creating a Mercurial bundle

1. Suppose you modified 'conclusion.tex' and 'main.tex'. Now, if you
run the 'hg status' command, you will see a 'M' next to these
files. So, mercurial knows that these file have changed, and it should
create a bundle of these changes.

2. First you must commit these changes by running the following
command: "hg commit -u <username> -m <message>". For example, I would
write: hg commit -u "Shantanu" -m "Made changes to conclusion and
abstract".

3. These changes have now been committed. You can verify this by
typing "hg log". This will give a log of all previous changes, with
the most recent one first. In the log, the version number is called a
"changeset". So, if this is the 10th version, you will see 10
changesets. The changeset number is followed by a hexadecimal code. No
need to worry about this. Just note the changeset number. Suppose that
you had received changeset 9, and not you made these changes and
committed them to generate changeset 10.

4. To make a bundle, type the command "hg bundle --base <reference
changeset number> filename.bundle". For example, I use the following
command "hg bundle --base 9 v9_v10.bundle". This tells mercurial to
use version 9 as reference and create the bundle file named in the
command.

5. Email the bundle file to people.


** Unbundling a Mercurial bundle 

1. Suppose you have now received a bundle and you want to incorporate
those changes. You just run "hg unbundle <bundlefilename>". For the
above example, suppose Ye has version 9 (i.e., changeset 9), and I
sent him the file v9_v10.bundle. He will just run "hg unbundle
v9_v10.bundle".

2. You will get a message indicating that the unbundling
finished. Now, you need to run "hg update".

3. After this, if you run "hg log" , you will see again a log of
changes, with the most recent one on top. That is an easy way to
verify if your unbundling worked.

There are commands to undo changes as well. You can check those on the
mercurial website. In nearly all cases, the above sequence should be
completely sufficient.